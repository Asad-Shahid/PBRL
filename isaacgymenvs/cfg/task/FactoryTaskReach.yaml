# See schema in factory_schema_config_task.py for descriptions of common parameters.

defaults:
    - FactoryBase
    - _self_
    # - /factory_schema_config_task

name: FactoryTaskReach
physics_engine: ${..physics_engine}

sim:
    disable_gravity: False

env:
    numEnvs: ${resolve_default:128,${...num_envs}}
    numObservations: 21  # Was 20 in Factory
    numActions: 6  # Was 12 in Factory

    close_and_lift: True  # close gripper and lift after last step of episode
    num_gripper_move_sim_steps: 20  # number of timesteps to reserve for moving gripper before first step of episode
    num_gripper_close_sim_steps: 25  # number of timesteps to reserve for closing gripper after last step of episode
    num_gripper_lift_sim_steps: 25  # number of timesteps to reserve for lift after last step of episode

    plot: False

randomize:
    franka_arm_initial_dof_pos: [0.3413, -0.8011, -0.0670, -1.8299,  0.0266,  1.0185,  1.0927]

    fingertip_midpoint_pos: [  # initial position of hand above table
        [ 0.3,  0.70],  # x
        [-0.35, 0.35],  # y
        [ 0.05, 0.5]    # z
    ]
    fingertip_midpoint_rot: [  # initial rotation of fingertips (Euler)
        [ 3.14,   3.15],  # x
        [-0.01,   0.01],     # y
        [-0.5233, 0.5233]   # z
    ]
    goal_pos: [  # initial goal position
        [ 0.35, 0.65],  # x
        [-0.25, 0.25],  # y
        [ 0.0,  0.60]   # z
    ]
    goal_rot: [  # initial goal rotation
        [ 3.14,   3.15],  # x
        [-0.01,   0.01],     # y
        [-0.5233, 0.5233]   # z    
    ]

rl:
    pos_action_scale: [0.1, 0.1, 0.1]
    rot_action_scale: [0.1, 0.1, 0.1]
    force_action_scale: [1.0, 1.0, 1.0]
    torque_action_scale: [1.0, 1.0, 1.0]

    clamp_rot: True
    clamp_rot_thresh: 1.0e-6

    num_keypoints: 4  # number of keypoints used in reward
    keypoint_scale: 0.5  # length of line of keypoints

    keypoint_reward_scale: 1.0  # scale on keypoint-based reward
    action_penalty_scale: 0.0  # scale on action penalty

    max_episode_length: 100

    success_bonus: 0.0  # bonus if nut has been lifted

ctrl:
    ctrl_type: task_space_impedance  # {gym_default,
                               #  joint_space_ik, joint_space_id, 
                               #  task_space_impedance, operational_space_motion, 
                               #  open_loop_force, closed_loop_force,
                               #  hybrid_force_motion}
    all:
        jacobian_type: geometric
        gripper_prop_gains: [500, 500]
        gripper_deriv_gains: [2, 2]
    gym_default:
        ik_method: dls
        joint_prop_gains: [40, 40, 40, 40, 40, 40, 40]
        joint_deriv_gains: [8, 8, 8, 8, 8, 8, 8]
        gripper_prop_gains: [500, 500]
        gripper_deriv_gains: [20, 20]
    joint_space_ik:
        ik_method: dls
        joint_prop_gains: [1, 1, 1, 1, 1, 1, 1]
        joint_deriv_gains: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]
    joint_space_id:
        ik_method: dls
        joint_prop_gains: [40, 40, 40, 40, 40, 40, 40]
        joint_deriv_gains: [8, 8, 8, 8, 8, 8, 8]
    task_space_impedance:
        motion_ctrl_axes: [1, 1, 1, 1, 1, 1]
        task_prop_gains: [1000, 1000, 1000, 50, 50, 50]
        task_deriv_gains: [63.25, 63.25, 63.25, 1.414, 1.414, 1.414]  # 2 sqrt(task_prop_gains)
    operational_space_motion:
        motion_ctrl_axes: [1, 1, 1, 1, 1, 1]
        task_prop_gains: [1, 1, 1, 1, 1, 1]
        task_deriv_gains: [1, 1, 1, 1, 1, 1]
    open_loop_force:
        force_ctrl_axes: [0, 0, 1, 0, 0, 0]
    closed_loop_force:
        force_ctrl_axes: [0, 0, 1, 0, 0, 0]
        wrench_prop_gains: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1]
    hybrid_force_motion:
        motion_ctrl_axes: [1, 1, 0, 1, 1, 1]
        task_prop_gains: [40, 40, 40, 40, 40, 40]
        task_deriv_gains: [8, 8, 8, 8, 8, 8]
        force_ctrl_axes: [0, 0, 1, 0, 0, 0]
        wrench_prop_gains: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1]
task:
  randomize: False
  randomization_params:
    frequency: 720   # Define how many simulation steps between generating new randomizations
    observations:
      range: [0, .002] # range for the white noise
      range_correlated: [0, .001] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
      # schedule: "linear"   # "constant" is to turn on noise after `schedule_steps` num steps
      # schedule_steps: 40000
    actions:
      range: [0., .05]
      range_correlated: [0, .015] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
      # schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
      # schedule_steps: 40000